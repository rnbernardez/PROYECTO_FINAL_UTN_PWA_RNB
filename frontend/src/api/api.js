import axios from "axios";

const API_BASE_URL = import.meta.env.VITE_API_URL;

const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    "Content-Type": "application/json",
  },
});

// üî• Interceptor para incluir el token JWT en cada petici√≥n si el usuario est√° autenticado
api.interceptors.request.use((config) => {
  const token = localStorage.getItem("token"); // Suponiendo que guardamos el token aqu√≠
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

// üî• Interceptor para manejar errores globalmente
api.interceptors.response.use(
  (response) => response, // Si la respuesta es exitosa, simplemente la retorna
  (error) => {
    console.error("Error en la API:", error.response?.data || error.message);

    // Manejo espec√≠fico de errores
    if (error.response?.status === 401) {
      console.warn("Usuario no autenticado o sesi√≥n expirada");
      // Aqu√≠ podr√≠amos redirigir al usuario al login, por ejemplo
    } else if (error.response?.status === 403) {
      console.warn("Acceso prohibido");
    } else if (error.response?.status === 500) {
      console.warn("Error en el servidor, int√©ntalo m√°s tarde.");
    }

    return Promise.reject(error); // Importante para que el frontend maneje el error
  }
);

export default api;